{"title":"Visualizations","markdown":{"yaml":{"title":"Visualizations","format":"html"},"headingText":"Regression Plot - Strength vs Age","containsRefs":false,"markdown":"\n```{python}\n#import dependencies\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.lines import Line2D\n#load data\naclr = pd.read_csv('cleaned_aclr_data.csv')\n```\n\n\n```{python}\n#filter data for only patients at 5 to 7 months post operation\naclr_filtered = aclr[aclr['tss_dashboard'] == '5 to 7 months']\n\n#set figure size\nplt.figure(figsize=(11, 7))\n\n#melting data for isok variables, adding age to isok dataframe\nisok = aclr_filtered[[col for col in aclr.columns if 'isok' in col]].copy()\nisok['age'] = aclr_filtered['age']\nisok = isok.melt(id_vars='age', var_name=\"Measurement\", value_name=\"Value\")\nisok.replace([float('inf'), float('-inf')], float('nan'), inplace=True)\nisok.dropna(inplace=True)\n\n#averaging value by age\nisok_avg = isok.groupby(['age', 'Measurement'])['Value'].mean().reset_index()\n\n#seperating into extension and flexion measurements\nisok_measurements = isok_avg['Measurement'].unique()\n\n#plotting isok regression plot\nfor m in isok_measurements:\n    subset = isok_avg[isok_avg['Measurement'] == m]\n    label = 'Extension' if 'ext' in m else 'Flexion'\n    color = 'firebrick' if 'ext' in m else 'slateblue'\n    sns.regplot(data=subset, x='age', y='Value', label= label, color = color, scatter=True)\nplt.tick_params(axis='both', which='both', length=0)\nplt.xlabel('Age')\nplt.ylabel('ISOK Strength')\n\n#adding title and subtitle\nplt.title('Average Limb Symmetry Index (LSI) for Isokinetic Knee Strength Test at 60°, 5 to 7 Months Post-Operation',loc = 'left', x = -0.03, family = 'serif', pad = 20, fontsize=13, color='gray')\nplt.text(-0.03, 1.15, 'Despite Patient Age,', va='top', font='Times New Roman', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\nplt.text(0.235, 1.15, \"Flexion\", va='top', font='Times New Roman', color = 'slateblue', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\nplt.text(0.337, 1.15, 'Strength Appears Better Than', va='top', font='Times New Roman', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\nplt.text(0.732, 1.15, \"Extension\", va='top', font='Times New Roman', color = 'firebrick', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\n\n#setting y range (LSI above 125 are rare)\nplt.ylim(0, 125)\n#despine and tight layout\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.tight_layout()\nplt.savefig('strengthreg.jpg', format='jpg', dpi=300, bbox_inches='tight')\n```\n\n## Spaghetti Plot - early and late recovery\n```{python}\n#group data by time since surgery\nacl_grouped = aclr.groupby('tss_dashboard').agg(\n    mean_ext_mvic_60=('lsi_ext_mvic_60', 'mean'),\n    mean_flex_mvic=('lsi_flex_mvic_60', 'mean'),\n    mean_ext_isok=('lsi_ext_isok_60', 'mean'),\n    mean_flex_isok=('lsi_flex_isok_60', 'mean')\n).reset_index()\n\n#filter out and order only early and late time windows\nnew_order = [1,2,3,0,4,5]\nacl_grouped = acl_grouped.iloc[new_order]\nacl_grouped = acl_grouped.reset_index(drop=True)\nacl_grouped = acl_grouped.drop(index=[1,2,4,5])\nacl_grouped = acl_grouped.reset_index(drop=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n#graph slopes\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_ext_isok'], linestyle='-', color='firebrick', label='Extension Isokinetic')\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_flex_isok'], linestyle='-', color='slateblue', label='Flexion Isokinetic')\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_flex_mvic'], linestyle='--', color='slateblue', label='Flexion MVIC')\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_ext_mvic_60'], linestyle='--', color='firebrick', label='Extension MVIC')\n\n#remove unnecessary scaffolding\nax.set_ylim(60, 100)\nax.set_yticks([])\nax.set_ylabel('')\nax.set_xticks([])\nax.set_xlabel('')\nsns.despine(top=True, right=True, left=True, bottom=True)\n\n#add a legend for line type\ncustom_legend = [\n    Line2D([0], [0], color='black', linestyle='-', label='Isokinetic (60°/s)'),\n    Line2D([0], [0], color='black', linestyle='--', label='MVIC (60°)')\n]\nax.legend(handles=custom_legend, loc='lower right', fontsize=12)\n\n#add color coded title (with degrees)\nplt.text(0.125, 1.13, 'Patients Have Stronger', ha='center', va='top', fontsize=22, font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.36, 1.13, 'Flexion', ha='center', va='top', fontsize=22, color='slateblue', font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.462, 1.13, 'Than', ha='center', va='top', fontsize=22, font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.58, 1.13, 'Extension', ha='center', va='top', fontsize=22, color='firebrick', font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.772, 1.13, 'After Recovery', ha='center', va='top', fontsize=22, font='Times New Roman', fontweight='bold', transform=ax.transAxes)\n\n#add a subtitle/y axis label\nplt.text(-0.045, 1.065, 'Average Limb Symmetry Index (LSI) for Knee Strength Tests at 60°/s',\n         ha='left', va='top', fontsize=16, font='Times New Roman', transform=ax.transAxes)\n\n#label start and end values\nplt.text(-0.05, 0.53, '81.8%', color='slateblue', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.9, '96.4%', color='slateblue', fontsize=13, transform=ax.transAxes)\n\nplt.text(-0.05, 0.4, '76.0%', color='slateblue', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.45, '78.4%', color='slateblue', fontsize=13, transform=ax.transAxes)\n\nplt.text(-0.05, 0.06, '63.1%', color='firebrick', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.49, '79.7%', color='firebrick', fontsize=13, transform=ax.transAxes)\n\nplt.text(-0.05, 0.22, '69.3%', color='firebrick', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.39, '76.3%', color='firebrick', fontsize=13, transform=ax.transAxes)\n\n#label axes\nplt.text(0.055, 1, \"3–4 months post-op\", ha='center', va='top', fontsize=13, transform=ax.transAxes)\nplt.text(0.9, 1, \"13–24 months post-op\", ha='center', va='top', fontsize=13, transform=ax.transAxes)\nplt.tight_layout()\nplt.savefig('spaghetti.jpg', format='jpg', dpi=300, bbox_inches='tight')\n```\n\n## Connected Scatterplot\n```{python}\n#define the selected patients that filter patinets with 2 or more visits and picked the top 5\ndf_required_2 = aclr.dropna(subset=['lsi_flex_mvic_60', 'acl_rsi', 'tss'])\npatient_counts_2 = df_required_2['record_id'].value_counts()\nselected_patients_2 = patient_counts_2[patient_counts_2 >= 2].index[:5]\ndf_selected_2 = df_required_2[df_required_2['record_id'].isin(selected_patients_2)]\n\n\n#same with iso\ndf_iso_required = aclr.dropna(subset=['lsi_ext_isok_60', 'acl_rsi', 'tss'])\npatient_counts_iso = df_iso_required['record_id'].value_counts()\nselected_iso_patients = patient_counts_iso[patient_counts_iso >= 2].index[:5]\ndf_iso_selected = df_iso_required[df_iso_required['record_id'].isin(selected_iso_patients)]\n\n#make the legend sit inside the plot \nfig, axes = plt.subplots(1, 2, figsize=(16, 8), sharey=True)\n\n\n#first plot the flexion strength vs rsi\npalette = sns.color_palette(\"colorblind\", len(selected_patients_2))\nfor i, pid in enumerate(selected_patients_2):\n   patient_df = df_selected_2[df_selected_2['record_id'] == pid]\n   x_vals = patient_df['lsi_flex_mvic_60'].values\n   y_vals = patient_df['acl_rsi'].values\n   for j in range(len(x_vals) - 1):\n       dx = x_vals[j+1] - x_vals[j]\n       dy = y_vals[j+1] - y_vals[j]\n       x_mid = (x_vals[j] + x_vals[j+1]) / 2\n       y_mid = (y_vals[j] + y_vals[j+1]) / 2\n       axes[0].arrow(x_mid, y_mid,dx * 0.0001, dy * 0.0001,color=palette[i],alpha=0.9,head_width=1.5,head_length=1.5,length_includes_head=True)\n       axes[0].plot([x_vals[j], x_vals[j+1]], [y_vals[j], y_vals[j+1]], color=palette[i], linewidth=1.5)\n   axes[0].scatter(x_vals, y_vals, color=palette[i], edgecolor='k')\naxes[0].set_xlabel(\"Flexion Strength (LSI - MVIC 60°)\")\naxes[0].set_ylabel(\"ACL-RSI Score\")\n\n\n#make the legend\nlegend_patch = plt.Line2D([0], [0], marker='_', color='grey', label='Each color = one patient',markerfacecolor='gray', markersize=10)\naxes[0].legend(handles=[legend_patch], loc='lower right')\n\n\n#make the second plot for extension strength vs rsi\npalette_ext = sns.color_palette(\"colorblind\", len(selected_iso_patients))\nfor i, pid in enumerate(selected_iso_patients):\n   patient_df = df_iso_selected[df_iso_selected['record_id'] == pid]\n   x_vals = patient_df['lsi_ext_isok_60'].values\n   y_vals = patient_df['acl_rsi'].values\n   for j in range(len(x_vals) - 1):\n       dx = x_vals[j+1] - x_vals[j]\n       dy = y_vals[j+1] - y_vals[j]\n       x_mid = (x_vals[j] + x_vals[j+1]) / 2\n       y_mid = (y_vals[j] + y_vals[j+1]) / 2\n       axes[1].arrow(x_mid, y_mid,dx * 0.0001, dy * 0.0001,color=palette_ext[i],alpha=0.9,head_width=1.5,head_length=1.5,length_includes_head=True)\n       axes[1].plot([x_vals[j], x_vals[j+1]], [y_vals[j], y_vals[j+1]], color=palette_ext[i], linewidth=1.5)\n   axes[1].scatter(x_vals, y_vals, color=palette_ext[i], edgecolor='k')\naxes[1].set_xlabel(\"Extension Strength (LSI - Isokinetic 60°/s)\")\n\n\n#plot final plots\nplt.suptitle(\"Recovery is Nonlinear: Strength and Psychological Readiness\", fontsize=22, font = 'Times New Roman', fontweight = 'bold', y=1.03, x =0.29)\nfig.text(0.174, 0.972, \"Sample Patients' Development Over Time\", ha='center', va='top', fontsize=18, font='Times New Roman')\nsns.despine(ax=axes[0], top=True, right=True) #take off the top and right spines\nsns.despine(ax=axes[1], top=True, right=True)\nplt.tight_layout()\nplt.savefig('connected.jpg', format='jpg', dpi=300, bbox_inches='tight')\n```","srcMarkdownNoYaml":"\n```{python}\n#import dependencies\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.lines import Line2D\n#load data\naclr = pd.read_csv('cleaned_aclr_data.csv')\n```\n\n\n## Regression Plot - Strength vs Age\n```{python}\n#filter data for only patients at 5 to 7 months post operation\naclr_filtered = aclr[aclr['tss_dashboard'] == '5 to 7 months']\n\n#set figure size\nplt.figure(figsize=(11, 7))\n\n#melting data for isok variables, adding age to isok dataframe\nisok = aclr_filtered[[col for col in aclr.columns if 'isok' in col]].copy()\nisok['age'] = aclr_filtered['age']\nisok = isok.melt(id_vars='age', var_name=\"Measurement\", value_name=\"Value\")\nisok.replace([float('inf'), float('-inf')], float('nan'), inplace=True)\nisok.dropna(inplace=True)\n\n#averaging value by age\nisok_avg = isok.groupby(['age', 'Measurement'])['Value'].mean().reset_index()\n\n#seperating into extension and flexion measurements\nisok_measurements = isok_avg['Measurement'].unique()\n\n#plotting isok regression plot\nfor m in isok_measurements:\n    subset = isok_avg[isok_avg['Measurement'] == m]\n    label = 'Extension' if 'ext' in m else 'Flexion'\n    color = 'firebrick' if 'ext' in m else 'slateblue'\n    sns.regplot(data=subset, x='age', y='Value', label= label, color = color, scatter=True)\nplt.tick_params(axis='both', which='both', length=0)\nplt.xlabel('Age')\nplt.ylabel('ISOK Strength')\n\n#adding title and subtitle\nplt.title('Average Limb Symmetry Index (LSI) for Isokinetic Knee Strength Test at 60°, 5 to 7 Months Post-Operation',loc = 'left', x = -0.03, family = 'serif', pad = 20, fontsize=13, color='gray')\nplt.text(-0.03, 1.15, 'Despite Patient Age,', va='top', font='Times New Roman', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\nplt.text(0.235, 1.15, \"Flexion\", va='top', font='Times New Roman', color = 'slateblue', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\nplt.text(0.337, 1.15, 'Strength Appears Better Than', va='top', font='Times New Roman', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\nplt.text(0.732, 1.15, \"Extension\", va='top', font='Times New Roman', color = 'firebrick', fontsize=22, fontweight='bold', transform=plt.gca().transAxes)\n\n#setting y range (LSI above 125 are rare)\nplt.ylim(0, 125)\n#despine and tight layout\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.tight_layout()\nplt.savefig('strengthreg.jpg', format='jpg', dpi=300, bbox_inches='tight')\n```\n\n## Spaghetti Plot - early and late recovery\n```{python}\n#group data by time since surgery\nacl_grouped = aclr.groupby('tss_dashboard').agg(\n    mean_ext_mvic_60=('lsi_ext_mvic_60', 'mean'),\n    mean_flex_mvic=('lsi_flex_mvic_60', 'mean'),\n    mean_ext_isok=('lsi_ext_isok_60', 'mean'),\n    mean_flex_isok=('lsi_flex_isok_60', 'mean')\n).reset_index()\n\n#filter out and order only early and late time windows\nnew_order = [1,2,3,0,4,5]\nacl_grouped = acl_grouped.iloc[new_order]\nacl_grouped = acl_grouped.reset_index(drop=True)\nacl_grouped = acl_grouped.drop(index=[1,2,4,5])\nacl_grouped = acl_grouped.reset_index(drop=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n#graph slopes\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_ext_isok'], linestyle='-', color='firebrick', label='Extension Isokinetic')\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_flex_isok'], linestyle='-', color='slateblue', label='Flexion Isokinetic')\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_flex_mvic'], linestyle='--', color='slateblue', label='Flexion MVIC')\nax.plot(acl_grouped['tss_dashboard'], acl_grouped['mean_ext_mvic_60'], linestyle='--', color='firebrick', label='Extension MVIC')\n\n#remove unnecessary scaffolding\nax.set_ylim(60, 100)\nax.set_yticks([])\nax.set_ylabel('')\nax.set_xticks([])\nax.set_xlabel('')\nsns.despine(top=True, right=True, left=True, bottom=True)\n\n#add a legend for line type\ncustom_legend = [\n    Line2D([0], [0], color='black', linestyle='-', label='Isokinetic (60°/s)'),\n    Line2D([0], [0], color='black', linestyle='--', label='MVIC (60°)')\n]\nax.legend(handles=custom_legend, loc='lower right', fontsize=12)\n\n#add color coded title (with degrees)\nplt.text(0.125, 1.13, 'Patients Have Stronger', ha='center', va='top', fontsize=22, font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.36, 1.13, 'Flexion', ha='center', va='top', fontsize=22, color='slateblue', font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.462, 1.13, 'Than', ha='center', va='top', fontsize=22, font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.58, 1.13, 'Extension', ha='center', va='top', fontsize=22, color='firebrick', font='Times New Roman', fontweight='bold', transform=ax.transAxes)\nplt.text(0.772, 1.13, 'After Recovery', ha='center', va='top', fontsize=22, font='Times New Roman', fontweight='bold', transform=ax.transAxes)\n\n#add a subtitle/y axis label\nplt.text(-0.045, 1.065, 'Average Limb Symmetry Index (LSI) for Knee Strength Tests at 60°/s',\n         ha='left', va='top', fontsize=16, font='Times New Roman', transform=ax.transAxes)\n\n#label start and end values\nplt.text(-0.05, 0.53, '81.8%', color='slateblue', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.9, '96.4%', color='slateblue', fontsize=13, transform=ax.transAxes)\n\nplt.text(-0.05, 0.4, '76.0%', color='slateblue', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.45, '78.4%', color='slateblue', fontsize=13, transform=ax.transAxes)\n\nplt.text(-0.05, 0.06, '63.1%', color='firebrick', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.49, '79.7%', color='firebrick', fontsize=13, transform=ax.transAxes)\n\nplt.text(-0.05, 0.22, '69.3%', color='firebrick', fontsize=13, transform=ax.transAxes)\nplt.text(0.96, 0.39, '76.3%', color='firebrick', fontsize=13, transform=ax.transAxes)\n\n#label axes\nplt.text(0.055, 1, \"3–4 months post-op\", ha='center', va='top', fontsize=13, transform=ax.transAxes)\nplt.text(0.9, 1, \"13–24 months post-op\", ha='center', va='top', fontsize=13, transform=ax.transAxes)\nplt.tight_layout()\nplt.savefig('spaghetti.jpg', format='jpg', dpi=300, bbox_inches='tight')\n```\n\n## Connected Scatterplot\n```{python}\n#define the selected patients that filter patinets with 2 or more visits and picked the top 5\ndf_required_2 = aclr.dropna(subset=['lsi_flex_mvic_60', 'acl_rsi', 'tss'])\npatient_counts_2 = df_required_2['record_id'].value_counts()\nselected_patients_2 = patient_counts_2[patient_counts_2 >= 2].index[:5]\ndf_selected_2 = df_required_2[df_required_2['record_id'].isin(selected_patients_2)]\n\n\n#same with iso\ndf_iso_required = aclr.dropna(subset=['lsi_ext_isok_60', 'acl_rsi', 'tss'])\npatient_counts_iso = df_iso_required['record_id'].value_counts()\nselected_iso_patients = patient_counts_iso[patient_counts_iso >= 2].index[:5]\ndf_iso_selected = df_iso_required[df_iso_required['record_id'].isin(selected_iso_patients)]\n\n#make the legend sit inside the plot \nfig, axes = plt.subplots(1, 2, figsize=(16, 8), sharey=True)\n\n\n#first plot the flexion strength vs rsi\npalette = sns.color_palette(\"colorblind\", len(selected_patients_2))\nfor i, pid in enumerate(selected_patients_2):\n   patient_df = df_selected_2[df_selected_2['record_id'] == pid]\n   x_vals = patient_df['lsi_flex_mvic_60'].values\n   y_vals = patient_df['acl_rsi'].values\n   for j in range(len(x_vals) - 1):\n       dx = x_vals[j+1] - x_vals[j]\n       dy = y_vals[j+1] - y_vals[j]\n       x_mid = (x_vals[j] + x_vals[j+1]) / 2\n       y_mid = (y_vals[j] + y_vals[j+1]) / 2\n       axes[0].arrow(x_mid, y_mid,dx * 0.0001, dy * 0.0001,color=palette[i],alpha=0.9,head_width=1.5,head_length=1.5,length_includes_head=True)\n       axes[0].plot([x_vals[j], x_vals[j+1]], [y_vals[j], y_vals[j+1]], color=palette[i], linewidth=1.5)\n   axes[0].scatter(x_vals, y_vals, color=palette[i], edgecolor='k')\naxes[0].set_xlabel(\"Flexion Strength (LSI - MVIC 60°)\")\naxes[0].set_ylabel(\"ACL-RSI Score\")\n\n\n#make the legend\nlegend_patch = plt.Line2D([0], [0], marker='_', color='grey', label='Each color = one patient',markerfacecolor='gray', markersize=10)\naxes[0].legend(handles=[legend_patch], loc='lower right')\n\n\n#make the second plot for extension strength vs rsi\npalette_ext = sns.color_palette(\"colorblind\", len(selected_iso_patients))\nfor i, pid in enumerate(selected_iso_patients):\n   patient_df = df_iso_selected[df_iso_selected['record_id'] == pid]\n   x_vals = patient_df['lsi_ext_isok_60'].values\n   y_vals = patient_df['acl_rsi'].values\n   for j in range(len(x_vals) - 1):\n       dx = x_vals[j+1] - x_vals[j]\n       dy = y_vals[j+1] - y_vals[j]\n       x_mid = (x_vals[j] + x_vals[j+1]) / 2\n       y_mid = (y_vals[j] + y_vals[j+1]) / 2\n       axes[1].arrow(x_mid, y_mid,dx * 0.0001, dy * 0.0001,color=palette_ext[i],alpha=0.9,head_width=1.5,head_length=1.5,length_includes_head=True)\n       axes[1].plot([x_vals[j], x_vals[j+1]], [y_vals[j], y_vals[j+1]], color=palette_ext[i], linewidth=1.5)\n   axes[1].scatter(x_vals, y_vals, color=palette_ext[i], edgecolor='k')\naxes[1].set_xlabel(\"Extension Strength (LSI - Isokinetic 60°/s)\")\n\n\n#plot final plots\nplt.suptitle(\"Recovery is Nonlinear: Strength and Psychological Readiness\", fontsize=22, font = 'Times New Roman', fontweight = 'bold', y=1.03, x =0.29)\nfig.text(0.174, 0.972, \"Sample Patients' Development Over Time\", ha='center', va='top', fontsize=18, font='Times New Roman')\nsns.despine(ax=axes[0], top=True, right=True) #take off the top and right spines\nsns.despine(ax=axes[1], top=True, right=True)\nplt.tight_layout()\nplt.savefig('connected.jpg', format='jpg', dpi=300, bbox_inches='tight')\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"dataviz.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"journal","backgroundcolor":"#ffffff","title":"Visualizations"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}